# #!/usr/bin/perl
snippet #!
	#!/usr/bin/perl

# Hash Pointer
snippet .
	 =>
# Function
snippet sub
	sub ${1:function_name} {
		${2:#body ...}
	}
# Attribute
snippet attr
	sub ${1:attr_name} {
		my $self = shift;

		return $self->{$1} unless @_;

		$self->{$1} = $_[0];

		return $self;
	}
# Method
snippet m
	sub ${1:method_name} {
		my $self = shift;
		my (%params) = @_;

		${2:#body ...}

		return $self;
	}
# Conditional
snippet if
	if (${1}) {
		${2:# body...}
	}
# Conditional if..else
snippet ife
	if (${1}) {
		${2:# body...}
	}
	else {
		${3:# else...}
	}
# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2:# body...}
	}
	elsif (${3}) {
		${4:# elsif...}
	}
	else {
		${5:# else...}
	}
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};${3}
# Unless conditional
snippet unless
	unless (${1}) {
		${2:# body...}
	}
# Unless conditional One-line
snippet xunless
	${1:expression} unless ${2:condition};${3}
# Try/Except
snippet eval
	eval {
		${1:# do something risky...}
	};
	if ($@) {
		${2:# handle failure...}
	}
# Try::Tiny;
snippet try
	try {
		${1:# do something risky...}
	}
	catch {
		${2:# handle failure...}
	};
# While Loop
snippet wh
	while (${1}) {
		${2:# body...}
	}
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};${3}
# C-style For Loop
snippet cfor
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4:# body...}
	}
# For loop one-line
snippet xfor
	${1:expression} for @${2:array};${3}
# Foreach Loop
snippet for
	foreach my $${1:x} (@${2:array}) {
		${3:# body...}
	}
# Foreach Loop One-line
snippet fore
	${1:expression} foreach @${2:array};${3}
# Package
snippet p
	package ${1:ClassName};

	use strict;
	use warnings;

	use base '${2:ParentClass}';

	sub new {
		my $class = shift;

		my $self = bless {@_}, $class;

		return $self;
	}

	${3}

	1;
snippet n
	sub new {
		my $class = shift;

		my $self = {@_};
		bless $self, $class;

		return $self;
	}
# Read File
snippet slurp
	do { local $/; open my $fh, '<', $${1:file} or die $!; <$fh> };
	${2}
# Dumper
snippet dump
	use Data::Dumper; warn Dumper(${1:var});
snippet !
	#!/usr/bin/env perl

	use strict;
	use warnings;

	${1}
